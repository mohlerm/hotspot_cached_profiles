--- old/src/share/vm/runtime/deoptimization.cpp	2016-08-15 12:19:53.485019658 +0200
+++ new/src/share/vm/runtime/deoptimization.cpp	2016-08-15 12:19:53.313019658 +0200
@@ -774,6 +774,10 @@
   return bt;
 JRT_END
 
+void Deoptimization::print_deoptimization_count() {
+  ttyLocker ttyl;
+  tty->print_cr("Total number of deoptimizations: %d <<<", _deoptimization_count);
+}
 
 int Deoptimization::deoptimize_dependents() {
   Threads::deoptimized_wrt_marked_nmethods();
@@ -1150,6 +1154,12 @@
     }
   }
 #endif
+  if (PrintDeoptimizationCount || PrintDeoptimizationCountVerbose) {
+    increase_deoptimization_count();
+    if (PrintDeoptimizationCountVerbose) {
+      print_deoptimization_count();
+    }
+  }
 
   // Register map for next frame (used for stack crawl).  We capture
   // the state of the deopt'ing frame's caller.  Thus if we need to
@@ -1285,6 +1295,11 @@
   BiasedLocking::revoke_at_safepoint(objects_to_revoke);
 }
 
+volatile int Deoptimization::_deoptimization_count = 0;
+
+void Deoptimization::increase_deoptimization_count() {
+  _deoptimization_count++;
+}
 
 void Deoptimization::deoptimize_single_frame(JavaThread* thread, frame fr, Deoptimization::DeoptReason reason) {
   assert(fr.can_be_deoptimized(), "checking frame type");
