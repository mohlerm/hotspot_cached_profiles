--- old/src/share/vm/ci/ciEnv.cpp	2016-08-15 16:43:28.932545495 +0200
+++ new/src/share/vm/ci/ciEnv.cpp	2016-08-15 16:43:28.844545495 +0200
@@ -31,6 +31,7 @@
 #include "ci/ciMethod.hpp"
 #include "ci/ciNullObject.hpp"
 #include "ci/ciReplay.hpp"
+#include "ci/ciCacheReplay.hpp"
 #include "ci/ciUtilities.hpp"
 #include "classfile/systemDictionary.hpp"
 #include "classfile/vmSymbols.hpp"
@@ -1244,7 +1245,7 @@
 
 void ciEnv::dump_replay_data(int compile_id) {
   static char buffer[O_BUFLEN];
-  int ret = jio_snprintf(buffer, O_BUFLEN, "replay_pid%p_compid%d.log", os::current_process_id(), compile_id);
+  int ret = jio_snprintf(buffer, O_BUFLEN, "replay_pid%d_compid%d.log", os::current_process_id(), compile_id);
   if (ret > 0) {
     int fd = open(buffer, O_RDWR | O_CREAT | O_TRUNC, 0666);
     if (fd != -1) {
@@ -1260,9 +1261,10 @@
   }
 }
 
+
 void ciEnv::dump_inline_data(int compile_id) {
   static char buffer[O_BUFLEN];
-  int ret = jio_snprintf(buffer, O_BUFLEN, "inline_pid%p_compid%d.log", os::current_process_id(), compile_id);
+  int ret = jio_snprintf(buffer, O_BUFLEN, "inline_pid%d_compid%d.log", os::current_process_id(), compile_id);
   if (ret > 0) {
     int fd = open(buffer, O_RDWR | O_CREAT | O_TRUNC, 0666);
     if (fd != -1) {
@@ -1281,4 +1283,58 @@
       }
     }
   }
+}
+
+void ciEnv::dump_cache_profiles_unsafe(outputStream* out) {
+  ResourceMark rm;
+#if INCLUDE_JVMTI
+  out->print_cr("JvmtiExport can_access_local_variables %d",     _jvmti_can_access_local_variables);
+  out->print_cr("JvmtiExport can_hotswap_or_post_breakpoint %d", _jvmti_can_hotswap_or_post_breakpoint);
+  out->print_cr("JvmtiExport can_post_on_exceptions %d",         _jvmti_can_post_on_exceptions);
+#endif // INCLUDE_JVMTI
+
+  GrowableArray<ciMetadata*>* objects = _factory->get_ci_metadata();
+  out->print_cr("# %d ciObject found", objects->length());
+  for (int i = 0; i < objects->length(); i++) {
+    if(objects->at(i)->is_method() || objects->at(i)->is_method_data()) {
+      objects->at(i)->dump_replay_data(out);
+    }
+  }
+  dump_compile_data(out);
+  out->flush();
+}
+
+void ciEnv::dump_cache_profiles(outputStream* out) {
+  GUARDED_VM_ENTRY(
+    MutexLocker ml(Compile_lock);
+    dump_cache_profiles_unsafe(out);
+  )
+}
+
+bool ciEnv::first_dump = true;
+
+void ciEnv::dump_cache_profiles(int compile_id, const char* methodName) {
+  static char buffer[O_BUFLEN];
+  //int ret = jio_snprintf(buffer, O_BUFLEN, "profiles_pid%d_compid%d.dat", os::current_process_id(), compile_id);
+  //int ret = jio_snprintf(buffer, O_BUFLEN, "cached_profiles_%s.dat", methodName);
+  int ret = jio_snprintf(buffer, O_BUFLEN, "cached_profiles.dat");
+  if (ret > 0) {
+    int fd = -1;
+    if(first_dump) {
+      fd = open(buffer, O_RDWR | O_CREAT | O_TRUNC, 0666);
+      first_dump = false;
+    } else {
+      fd = open(buffer, O_RDWR | O_CREAT | O_APPEND, 0666);
+    }
+    if (fd != -1) {
+      FILE* replay_data_file = os::open(fd, "w");
+      if (replay_data_file != NULL) {
+        fileStream replay_data_stream(replay_data_file, /*need_close=*/true);
+        dump_cache_profiles(&replay_data_stream);
+        if(PrintCacheProfiles) tty->print_cr("# Compiler cached profile is saved as: %s", buffer);
+      } else {
+        if(PrintCacheProfiles) tty->print_cr("# Can't open file to dump cached profile.");
+      }
+    }
+  }
 }
