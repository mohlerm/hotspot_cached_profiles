--- old/src/share/vm/opto/bytecodeInfo.cpp	2016-08-15 16:52:13.640545495 +0200
+++ new/src/share/vm/opto/bytecodeInfo.cpp	2016-08-15 16:52:13.552545495 +0200
@@ -24,6 +24,8 @@
 
 #include "precompiled.hpp"
 #include "ci/ciReplay.hpp"
+#include "ci/ciCacheReplay.hpp"
+#include "ci/ciCacheProfiles.hpp"
 #include "classfile/systemDictionary.hpp"
 #include "classfile/vmSymbols.hpp"
 #include "compiler/compileBroker.hpp"
@@ -124,9 +126,14 @@
       _forced_inline = true;
       return true;
   }
-
-#ifndef PRODUCT
   int inline_depth = inline_level()+1;
+  if (ciCacheReplay::should_inline(C->replay_inline_data(), callee_method, caller_bci, inline_depth)) {
+	//tty->print_cr("force inline by ciCacheReplay");
+    set_msg("force inline by ciCacheReplay");
+    _forced_inline = true;
+    return true;
+  }
+#ifndef PRODUCT
   if (ciReplay::should_inline(C->replay_inline_data(), callee_method, caller_bci, inline_depth)) {
     set_msg("force inline by ciReplay");
     _forced_inline = true;
@@ -176,6 +183,12 @@
     // Not hot.  Check for medium-sized pre-existing nmethod at cold sites.
     if (callee_method->has_compiled_code() &&
         callee_method->instructions_size() > inline_small_code_size) {
+	  // we force inlining when the caller is cached (to make sure that we replay correctly)
+//	  if (ciCacheProfiles::is_cached(caller_method->get_Method())) {
+//		set_msg("force inline by ciCacheProfiles (over compiled into medium method)");
+//		_forced_inline = true;
+//		return true;
+//	  }
       set_msg("already compiled into a medium method");
       return false;
     }
@@ -231,10 +244,23 @@
     set_msg("disallowed by CompileCommand");
     return true;
   }
-
-#ifndef PRODUCT
   int caller_bci = jvms->bci();
   int inline_depth = inline_level()+1;
+  if (ciCacheReplay::should_inline(C->replay_inline_data(), callee_method, caller_bci, inline_depth)) {
+    set_msg("force inline by ciCacheReplay");
+    return false;
+  }
+
+  if (ciCacheReplay::should_not_inline(C->replay_inline_data(), callee_method, caller_bci, inline_depth)) {
+    set_msg("disallowed by ciCacheReplay");
+    return true;
+  }
+
+  if (ciCacheReplay::should_not_inline(callee_method)) {
+    set_msg("disallowed by ciCacheReplay");
+    return true;
+  }
+#ifndef PRODUCT
   if (ciReplay::should_inline(C->replay_inline_data(), callee_method, caller_bci, inline_depth)) {
     set_msg("force inline by ciReplay");
     return false;
